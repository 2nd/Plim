=======================
 Syntax
=======================


Line Indicators
==================

``|``
  The pipe tells Plim to just copy the line. It essentially escapes any processing.

``,``
  The comma tells Plim to copy the line (similar to ``|``), but makes sure that a single trailing space is appended.

  Please note, that Slim syntax instead has the single quote ( ``'`` ) line indicator.

``-``
  The dash denotes control code. Examples of control code are loops, conditionals,
  mako tags, and extensions.

``=``
  The equal sign tells Plim it's a Python call that produces output to add to the buffer.

``=,``
  Same as the single equal sign ( ``=`` ), except that it adds an explicit whitespace
  before a python expression.

``==``
  Same as the single equal sign ( ``=`` ), but adds `the "n" filter <http://docs.makotemplates.org/en/latest/filtering.html>`_
  to mako expression.

  .. code-block:: plim

     == python_expression                       =>      ${python_expression|n}

     == python_expression | custom_filter       =>      ${python_expression |n,custom_filter}


``==,``
  Same as the double equal sign ( ``==`` ), except that it adds an explicit whitespace
  before a python expression.

``/``
  Use the forward slash for code comments - anything after it won't get displayed in the final mako markup.


  Please note, that **there is no an equivalent syntax for Slim's ``/!`` html comment**.
  This construct has been considered redundant since Plim supports raw HTML tags:

  .. code-block:: plim

      / You can use raw HTML comment tags, as well as all other tags
      <!-- HTML comment -->
      <div>

        / You can use Plim markup inside the raw HTML
        a href="#" = link.title

      / If you use raw HTML, you have to close all tags manually
      </div>


Language Features
==================


Indentation
----------------------------------------------------

Plim indentation rules are the same as of Slim: indentation matters, but it's not as strict as Haml.
If you want to first indent 2 spaces, then 5 spaces, it's your choice. To nest markup you only need to
indent by one space, the rest is gravy.


Attributes Wrapping
---------------------------------

You can wrap tag attributes with parentheses ``()``. Unlike Slim, Plim doesn't support square ``[]`` or
curly ``{}`` braces for attributes wrapping.

.. code-block:: plim

    body
      h1(id="logo" class="small tagline") = page_logo
      h2 id=(id_from_variable + '-idx') = page_tagline


If you wrap the attributes, you can spread them across multiple lines:

.. code-block:: plim

    body

      h1 (id="logo"
        class="small tagline") = page_logo

      h2 id=(
        id_from_variable +
        '-idx'
      ) = page_tagline


Inline Tag Content
---------------------

You can put content on the same line with the tag:

.. code-block:: plim

    body
      h1 id="headline" Welcome to my site.


Or nest it. Note: Use either a pipe or `Implicit literal indicators `_

.. code-block:: plim

    body
      h1 id="headline"

        / Explicit literal with pipe character
        | Welcome to my site.

        / Implicit literal (uppercase letter at the beginning of the line)
        Yes, Welcome to my site


Dynamic Tag Content
--------------------------------

You can make the call on the same line

.. code-block:: plim

    body
      h1 id="headline" = page_headline


Or nest it.

.. code-block:: plim

    body
      h1 id="headline"
        = page_headline


``id`` and ``class`` Shortcuts
-------------------------------------------

You can specify the id and class attributes in the following shortcut form.

Note: `unlike Slim <https://github.com/stonean/slim#shortcut-form-for-id-and-class-attributes>`_,
Plim allows you to evaluate dynamic expressions in the shortcuts.

.. code-block:: plim

    body

      / Static shortcuts
      h1#headline
        = page_headline
      h2#tagline.small.tagline
        = page_tagline
      .content
        = show_content

      / Dynamic shortcuts
      h1#headline-${'dynamic'}
        = page_headline
      h2#${tagline.id}.small-${tagline.cls}.${tagline.other_cls}
        = page_tagline
      .${'content'}
        = show_content


this is the same as

.. code-block:: plim

    body

      / Static shortcuts
      h1 id="headline"
        = page_headline
      h2 id="tagline" class="small tagline"
        = page_tagline
      div class="content"
        = show_content

      / Dynamic shortcuts
      h1 id="headline-${'dynamic'}"
        = page_headline
      h2 id="${tagline.id}" class="small-${tagline.cls} ${tagline.other_cls}"
        = page_tagline
      div class="${'content'}"
        = show_content


Inline Tags
------------

Sometimes you may want to be a little more compact and inline the tags.

.. code-block:: plim

    ul
      li.first: a href="/a" A link
      li: a href="/b" B link


For readability, don't forget you can wrap the attributes.

.. code-block:: plim

    ul
      li.first: a(href="/a") A link
      li: a(href="/b") B link


Evaluate Python Code in Text
-------------------------------

Use standard `mako expression syntax <http://docs.makotemplates.org/en/latest/syntax.html#expression-substitution>`_.
The text escaping depends on `mako's default filters settings <http://docs.makotemplates.org/en/latest/filtering.html?highlight=default%20filters#the-default-filters-argument>`_.

.. code-block:: plim

    body
      h1 Welcome ${current_user.name} to the show.
      Explicit non-escaped ${content|n} is also possible.


Currently, Mako doesn't provide a simple way to escape the interpolation of expressions
(i.e. render as is). You can use either the `<%text> <http://docs.makotemplates.org/en/latest/syntax.html#text>`_
tag (or Plim's ``-text`` equivalent for blocks of mako syntax examples), or this trick

.. code-block:: plim

    body
      h1 Welcome ${'${current_user.name}'} to the show.


Skip the HTML Escaping
------------------------

Use either a double equal sign

.. code-block:: plim

    body
      h1 id="headline"
        == page_headline


or the explicit ``| n`` filter at the end of the expression

.. code-block:: plim

    body
      h1 id="headline"
        = page_headline | n


Treat Multiple Lines of Code as Text That Should Bypass Parsing
------------------------------------------------------------------

Use a pipe ( ``|`` ) or comma ( ``,`` ) or implicit literal indicator to start the escape.
Each following line that is indented greater than the first one is copied over.

.. code-block:: plim

    body
      p
        / Explicit literal
        | This is a test of the text block.


.. code-block:: plim

    body
      p
        |
          This is a test of the text block.


.. code-block:: plim

    body
      p
        / Implicit literal (the line is started with the uppercase letter)
        This is a test of the text block.


The parsed result of all the above examples:

.. code-block:: html

    <body><p>This is a test of the text block.</p></body>


The left margin is set to the zero. Any additional spaces will be copied over.

.. code-block:: plim

    body
      p
        |  This line is on the zero left margin.
            This line will have one space in front of it.
              This line will have two spaces in front of it.
                And so on...


Add Comments
---------------

Use ``/`` for code comments

.. code-block:: plim

    body
      p
        / This line won't get displayed.
          Neither does this line.


Raw HTML Tags
--------------

It is particularly useful in situations like the following

.. code-block:: plim

    - if edit_profile
      / Wrap interface with editable block
      <div id="edit-profile">

    - include new_or_edit_interface.html

    -if edit_profile
      / end wrapping
      </div>


Implicit Literal Indicators
----------------------------

Literal blocks can be implicitly specified by uppercase starting letter.
Moreover, any non-ASCII starting letter indicates an implicit literal block, too.


Doctype Declarations
--------------------

.. code-block:: slim

   doctype 5




Control Logic
==============


Braces and Parentheses
----------------------


**if/elif/else** statements
~~~~~~~~~~~~~~~~~~~~~~~~~~~


**unless** statements
~~~~~~~~~~~~~~~~~~~~~


**for** statement
~~~~~~~~~~~~~~~~~


**while** statement
~~~~~~~~~~~~~~~~~~~


**until** statement
~~~~~~~~~~~~~~~~~~~


**with** statement
~~~~~~~~~~~~~~~~~~


**try/except** statements
~~~~~~~~~~~~~~~~~~~~~~~~~


Early return from template
~~~~~~~~~~~~~~~~~~~~~~~~~~


Code Comments
--------------

.. code-block:: slim

   / This is a comment.
     You can comment-out entire block with indentation


Literals
---------

You can specify either explicit or implicit literal blocks. The difference is,
whether you prepend a block with the explicit pipe char ``|`` or start it by one
of the implicit triggers:

- uppercase ASCII letter;
- any non-ASCII letter;
- digit without prefixed positive/negative signs;
- HTML-escaped characters, for example ``&nbsp;``;
- Mako open brace sequence ``${``;
- open square brace ``[``;
- open parenthesis ``(``;
- any unicode character outside the range of U0021 - U007E (ASCII 33 - 126).


Python Blocks
--------------

.. code-block:: slim

   - python x = 1

or

.. code-block:: slim

   -py
       x = 1

or even

.. code-block:: slim

   - python x = 1
       y = x + 1
       if True:
           y += 1
       else:
           y -= 1

In latter case, the first line ``x = 1`` will be aligned with the second line ``y = x + 1``.


Module-level Blocks
--------------------

.. code-block:: slim

    -py!
        from module_one import func_one
        from module_two import func_two


Mako Tags
----------

`Tags <http://docs.makotemplates.org/en/latest/syntax.html#tags>`_
